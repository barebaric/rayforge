name: Publish .deb to PPA

on:
  push:
    branches:
      - "*"
    tags:
      - "*"

jobs:
  lint-test:
    if: github.repository == 'barebaric/rayforge'
    uses: ./.github/workflows/lint-test.yml

  publish-to-ppa:
    name: Build and Publish to PPA for ${{ matrix.distro.name }}
    needs: [lint-test]
    # Define a build matrix for different Ubuntu versions
    strategy:
      matrix:
        distro:
          - { name: "Ubuntu 24.04", codename: "noble", runner: "ubuntu-24.04" }
    runs-on: ${{ matrix.distro.runner }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install build dependencies
        run: >
          sudo apt-get update && sudo apt-get install -y
          build-essential
          cargo
          cython3
          devscripts
          debhelper
          dh-python
          dput
          equivs
          jq
          python3-all
          python3-maturin
          python3-numpy
          pybuild-plugin-pyproject
          python3-poetry-core
          pkg-config
          rustc

      - name: Import GPG key
        env:
          GPG_PASSPHRASE: ${{ secrets.PPA_GPG_PASSPHRASE }}
          GPG_PRIVATE_KEY: ${{ secrets.PPA_GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PASSPHRASE" | gpg --batch --yes --pinentry-mode=loopback --passphrase-fd 0 --import <(echo "$GPG_PRIVATE_KEY" | base64 --decode)
          KEY_FINGERPRINT=$(gpg --list-secret-keys --with-colons | grep '^fpr' | head -n 1 | awk -F: '{print $10}')
          if [ -z "$KEY_FINGERPRINT" ]; then
            echo "::error::Could not extract GPG key fingerprint."
            exit 1
          fi
          echo "Found key fingerprint: $KEY_FINGERPRINT"
          echo "KEY_ID=$KEY_FINGERPRINT" >> $GITHUB_ENV

      - name: Build BINARY package for testing
        id: build_binary
        run: |
          chmod +x ./scripts/build-deb.sh
          ./scripts/build-deb.sh
          DEB_FILE=$(find dist -name "*.deb" -type f | head -n 1)
          echo "deb_file=$DEB_FILE" >> $GITHUB_OUTPUT

      - name: Install runtime dependencies for testing
        run: |
          sudo mk-build-deps --install --tool="apt-get -y" debian/control

      - name: Test package installation
        run: |
          sudo apt-get install -y ./${{ steps.build_binary.outputs.deb_file }}

      - name: Run smoke test
        run: |
          # Verify that the package is listed as installed
          dpkg -l rayforge
          # Verify the main executable is in the PATH and can be run
          # This simple command proves the installation was successful.
          rayforge --version

      - name: Clean build artifacts before final build
        run: rm -rf dist/*

      - name: Build SOURCE package for PPA upload
        env:
          TARGET_DISTRIBUTION: ${{ matrix.distro.codename }}
        run: ./scripts/build-deb.sh --source

      - name: Sign source package
        env:
          GPG_PASSPHRASE: ${{ secrets.PPA_GPG_PASSPHRASE }}
          KEY_ID: ${{ env.KEY_ID }}
        run: |
          echo "$GPG_PASSPHRASE" > /tmp/passphrase.txt
          debsign -p"gpg --batch --yes --pinentry-mode loopback --passphrase-file /tmp/passphrase.txt" -k"$KEY_ID" dist/*.changes
          rm /tmp/passphrase.txt

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deb-packages-${{ matrix.distro.codename }}
          path: dist/*

      - name: Upload to PPA
        if: startsWith(github.ref, 'refs/tags/')
        run: dput ppa:knipknap/rayforge dist/*.changes
