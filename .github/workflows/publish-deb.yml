name: Publish .deb to PPA

on:
  push:
    branches:
      - main
    tags:
      - "*"

jobs:
  lint-test:
    if: github.repository == 'barebaric/rayforge'
    uses: ./.github/workflows/lint-test.yml

  publish-to-ppa:
    name: Build and publish to PPA
    needs: [lint-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y devscripts debhelper dput build-essential python3-all dh-python

      - name: Import GPG key
        env:
          GPG_PASSPHRASE: ${{ secrets.PPA_GPG_PASSPHRASE }}
          GPG_PRIVATE_KEY: ${{ secrets.PPA_GPG_PRIVATE_KEY }}
        run: |
          # Import the key from secrets
          echo "$GPG_PASSPHRASE" | gpg --batch --yes --pinentry-mode=loopback --passphrase-fd 0 --import <(echo "$GPG_PRIVATE_KEY" | base64 --decode)

          # We add 'head -n 1' to ensure we only get the first fingerprint,
          # preventing errors from sub-keys.
          KEY_FINGERPRINT=$(gpg --list-secret-keys --with-colons | grep '^fpr' | head -n 1 | awk -F: '{print $10}')

          # Verify that we got a fingerprint
          if [ -z "$KEY_FINGERPRINT" ]; then
            echo "::error::Could not extract GPG key fingerprint."
            exit 1
          fi

          echo "Found key fingerprint: $KEY_FINGERPRINT"
          echo "KEY_ID=$KEY_FINGERPRINT" >> $GITHUB_ENV

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: latest

      - name: Build source package
        run: pixi run build-deb-source

      - name: Sign source package
        env:
          GPG_PASSPHRASE: ${{ secrets.PPA_GPG_PASSPHRASE }}
          KEY_ID: ${{ env.KEY_ID }}
        run: |
          # Create a temporary file for the GPG passphrase.
          echo "$GPG_PASSPHRASE" > /tmp/passphrase.txt

          # Sign the package using the -p flag, which is compatible with older debsign versions.
          debsign -p"gpg --batch --yes --pinentry-mode loopback --passphrase-file /tmp/passphrase.txt" -k"$KEY_ID" dist/*.changes

          # Securely remove the temporary passphrase file.
          rm /tmp/passphrase.txt

      - name: Upload to PPA
        run: dput ppa:knipknap/rayforge dist/*.changes
